package tests;

import org.testng.Assert;
import org.testng.annotations.Test;

public class EndToEndTests extends BaseTests {
    @Test
    public void EndToEndTests() throws InterruptedException {
        registerAnAccountPage.navigateToAutomationPractisePage();
        Thread.sleep(2000);
        registerAnAccountPage.enterSignInButton();
        Thread.sleep(2000);
        registerAnAccountPage.enterEmailAddress("KristinaM1234000@gmail.com");
        Thread.sleep(2000);
        registerAnAccountPage.clickCreateAnAccountButton();
        Thread.sleep(2000);
        registerAnAccountPage.clickMrsButton();
        Thread.sleep(2000);
        registerAnAccountPage.enterFirstName("Kristina");
        Thread.sleep(2000);
        registerAnAccountPage.enterLastName("Kikovski");
        Thread.sleep(2000);
        registerAnAccountPage.enterPassword("dobroutroooo");
        Thread.sleep(2000);
        registerAnAccountPage.selectDays("6");
        Thread.sleep(2000);
        registerAnAccountPage.selectMonths("May");
        registerAnAccountPage.selectYear("2018");
        Thread.sleep(2000);
        registerAnAccountPage.clickRegisterButton();
        Thread.sleep(2000);
        Assert.assertEquals(registerAnAccountPage.verifyTextForAccount(), "Your account has been created.");
        Assert.assertEquals(registerAnAccountPage.verifyTextWelcomeToYourAccount(), "Welcome to your account. Here you can manage all of your personal information and orders.");
        registerAnAccountPage.clickAddMyFirstAddressBtn();
        Thread.sleep(2000);
        Assert.assertEquals(registerAnAccountPage.validateYourAddressList(0), "To add a new address, please fill out the form below.");
        Assert.assertEquals(registerAnAccountPage.validateYourAddressList(1), "*Required field");
        registerAnAccountPage.enterCompanyName("Kika Company");
        Thread.sleep(2000);
        registerAnAccountPage.enterAddress1("Adresa na Kristina 1");
        Thread.sleep(2000);
        registerAnAccountPage.enterAddress2("Adresa na Kristina 2");
        Thread.sleep(2000);
        registerAnAccountPage.enterCity("Kumanovo");
        Thread.sleep(2000);
        registerAnAccountPage.selectStateName("Arizona");
        Thread.sleep(2000);
        registerAnAccountPage.enterZipCode("10000");
        Thread.sleep(2000);
        registerAnAccountPage.selectCountryName("United States");
        Thread.sleep(2000);
        registerAnAccountPage.enterPhoneNumber1("088888888");
        Thread.sleep(2000);
        js.executeScript("window.scrollBy(0,200)", "");
        registerAnAccountPage.enterPhoneNumber2("099999999");
        Thread.sleep(2000);
        registerAnAccountPage.clickSaveButton();
        Thread.sleep(2000);
        Assert.assertEquals(endToEndPage.verifyTextInMyAddreses(), "Please configure your default billing and delivery addresses when placing an order. You may also add additional addresses, which can be useful for sending gifts or receiving an order at your office.");
        Assert.assertEquals(endToEndPage.validateYourAddressPageList(0), "Your addresses are listed below.");
        Assert.assertEquals(endToEndPage.validateYourAddressPageList(1), "Be sure to update your personal information if it has changed.");
        Assert.assertEquals(endToEndPage.verifyMyAddressList(0),"MY ADDRESS");
        Assert.assertEquals(endToEndPage.verifyMyAddressList(1),"Kristina Kikovski");
        Assert.assertEquals(endToEndPage.verifyMyAddressList(2),"Kika Company");
        Assert.assertEquals(endToEndPage.verifyMyAddressList(3), "Adresa na Kristina 1 Adresa na Kristina 2");
        Assert.assertEquals(endToEndPage.verifyMyAddressList(4), "Kumanovo, Arizona 10000");
        Assert.assertEquals(endToEndPage.verifyMyAddressList(5), "United States");
        Assert.assertEquals(endToEndPage.verifyMyAddressList(6), "088888888");
        Assert.assertEquals(endToEndPage.verifyMyAddressList(7), "099999999");
        endToEndPage.clickHomeButton();
        Thread.sleep(2000);
        addProductsInCartPage.clickDressButton();
        Thread.sleep(2000);
        js.executeScript("window.scrollBy(0,300)", "");
        addProductsInCartPage.clickprintedDreess();
        addProductsInCartPage.switchToWindow();
        Thread.sleep(2000);
        addProductsInCartPage.clickPinkColor();
        addProductsInCartPage.clickAddToCartButton();
        addProductsInCartPage.switchToMainPage();
        Assert.assertEquals(addProductsInCartPage.validateTextProductInShoppingCart(), "Product successfully added to your shopping cart");
        //Assert.assertEquals(addProductsInCartPage.validateProductName(), "Printed evening dress with straight sleeves with black thin waist belt and ruffled linings.");
        //Assert.assertEquals(addProductsInCartPage.validateSizeAndColor(),"M, Pink");
        addProductsInCartPage.clickContinueShoppingButton();
        addProductsInCartPage.clickDressButton();
        addProductsInCartPage.clickSummerDresses();
        js.executeScript("window.scrollBy(0,300)", "");
        addProductsInCartPage.clickPrintedSummerDressButton();
        Thread.sleep(2000);
        addProductsInCartPage.switchToWindow();
        addProductsInCartPage.clickBlueColor();
        Assert.assertEquals(addProductsInCartPage.validateShortDressDescription(),"Long printed dress with thin adjustable straps. V-neckline and wiring under the bust with ruffles at the bottom of the dress.");
        Assert.assertEquals(addProductsInCartPage.validateDressCondition(), "Condition: New product");
        //addProductsInCartPage.clickQuantityButton();
        addProductsInCartPage.clickAddToCartButton();
        addProductsInCartPage.switchToMainPage();
        Assert.assertEquals(addProductsInCartPage.validateTextProductInShoppingCart(), "Product successfully added to your shopping cart");
        //Assert.assertEquals(addProductsInCartPage.validateProductName(), "Long printed dress with thin adjustable straps. V-neckline and wiring under the bust with ruffles at the bottom of the dress.");
        Assert.assertEquals(addProductsInCartPage.validateSizeAndColor(),"S, Blue");
        Thread.sleep(2000);
        addProductsInCartPage.clickProceedToCheckoutButton();
        js.executeScript("window.scrollBy(0,500)", "");
        Thread.sleep(2000);
        endToEndPage.clickProceedToCheckoutContinueShoppingButton();
        Assert.assertEquals(endToEndPage.verifyDeliveryAddressList(0),"YOUR DELIVERY ADDRESS");
        Assert.assertEquals(endToEndPage.verifyDeliveryAddressList(1),"Kristina Kikovski");
        Assert.assertEquals(endToEndPage.verifyDeliveryAddressList(2),"Kika Company");
        Thread.sleep(2000);
        js.executeScript("window.scrollBy(0,300)", "");
        Thread.sleep(2000);
        endToEndPage.clickProceedToCheckoutAdressButton();
        Thread.sleep(2000);
        js.executeScript("window.scrollBy(0,300)", "");
        Thread.sleep(2000);
        Assert.assertEquals(endToEndPage.verifyTextChooseAShippingOption(),"Choose a shipping option for this address: My address");
        Thread.sleep(2000);
        endToEndPage.clickTermsOfServiceCheckBtn();
        Thread.sleep(2000);
        js.executeScript("window.scrollBy(0,300)", "");
        endToEndPage.clickProceedToCheckoutShipping();
        Thread.sleep(2000);
        endToEndPage.clickPayByBankWireBtn();
        Thread.sleep(2000);
        Assert.assertEquals(endToEndPage.verifyBankWirePaymentBoldText(),"You have chosen to pay by bank wire. Here is a short summary of your order:");
        endToEndPage.clickConfirmMyOrderBtn();
        Thread.sleep(2000);
        js.executeScript("window.scrollBy(0,300)", "");
        Assert.assertEquals(endToEndPage.verifyOrderCompleteText(),"Your order on My Shop is complete.");




    }
}
